#!/usr/bin/env ansible-playbook
# (c) 2016 DataNexus Inc.  All Rights Reserved.
#
# kafka operations wrapper
---
- name: KAFKA CONNECTOR OPERATIONS | discovering shaw
  hosts: localhost
  tasks:
    - block:
      - ec2_instance_facts:
          region: "{{ region }}"
          filters:
            instance-state-name: running
            "tag:Domain": "{{ domain }}"
            "tag:Project": "{{ project }}"
            "tag:Tenant": "{{ tenant }}"
            "tag:Application": shaw
        register: shaw_instances

      - name: KAFKA CONNECTOR OPERATIONS | building shaw host group
        add_host: hostname="{{ item }}" groupname=shaw ansible_ssh_private_key_file="{{ key_path }}/{{ cloud }}-{{ region }}-{{ project }}-shaw-{{ domain }}-private-key.pem"
        with_items: "{{ shaw_instances.instances | map(attribute='private_ip_address') | list }}"
        when:
          - shaw_instances is defined
          - shaw_instances.instances | length > 0
      when:
        - cloud == 'aws'

- name: KAFKA CONNECTOR OPERATIONS | shaw
  hosts: shaw
  gather_facts: yes
  tasks:
    - include_vars: "{{ application_path }}/postgresql/vars/postgresql.yml"
      when: application_path is defined  

    - include_role:
        name: misc
        tasks_from: fetch-credentials
      vars:
        src_path: /etc/tls/datanexus/ca
        dst_path: "{{ key_path }}"
        subject: CA
      with_items:
        - ca-cert.pem
        - ca-key.pem

    - include_role:
        name: misc
        tasks_from: fetch-credentials
      vars:
        src_path: /etc/tls/datanexus/postgresql
        dst_path: "{{ key_path }}"
        subject: "{{ postgresql_user }}"
      with_items:
        - postgresql-{{ postgresql_user }}.crt
        - postgresql-{{ postgresql_user }}.key

- name: KAFKA CONNECTOR OPERATIONS | discovering kafka
  hosts: localhost
  tasks:
    - block:
      - ec2_instance_facts:
          region: "{{ region }}"
          filters:
            instance-state-name: running
            "tag:Domain": "{{ domain }}"
            "tag:Project": "{{ project }}"
            "tag:Tenant": "{{ tenant }}"
            "tag:Application": kafka
        register: kafka_instances

      - name: KAFKA CONNECTOR OPERATIONS | building kafka host group
        add_host: hostname="{{ item }}" groupname=kafka ansible_ssh_private_key_file="{{ key_path }}/{{ cloud }}-{{ region }}-{{ project }}-kafka-{{ domain }}-private-key.pem"
        with_items: "{{ kafka_instances.instances | map(attribute='private_ip_address') | list }}"
        when:
          - kafka_instances is defined
          - kafka_instances.instances | length > 0
      when:
        - cloud == 'aws'
        
- name: KAFKA CONNECTOR OPERATIONS | distributing certficates
  hosts: kafka
  tasks:
    - set_fact: worker_source=postgresql
    - set_fact: source_application=postgresql

    - include_vars: "{{ application_path }}/postgresql/vars/postgresql.yml"
      when: application_path is defined  

    - include_vars: "{{ application_path }}/kafka/vars/kafka.yml"
      when: application_path is defined  

    - include_role:
        name: connectors
        tasks_from: generate-stores
      vars:
        worker_source: postgresql
        source_application: postgresql
              
# - name: KAFKA CONNECTOR OPERATIONS | checking if {{ encrypted_user }} credentials exist
#   stat:
#     path: "/etc/tls/datanexus/postgresql/postgresql-{{ encrypted_user }}.key"
#   become: true
#   register: client_key
#
# - block:
#   - name: POSTGRESQL OPERATIONS | creating {{ encrypted_user }} SSL private key and csr
#     command: /bin/openssl req -nodes -newkey rsa:2048 -keyout "/etc/tls/datanexus/postgresql/postgresql-{{ encrypted_user }}.key" -out /etc/tls/datanexus/postgresql/postgresql-client.csr -subj "/C=US/ST=CO/L=Denver/O=DataNexus/CN={{ encrypted_user }}"
#
#   - name: POSTGRESQL OPERATIONS | signing {{ encrypted_user }} private key and writing certificate
#     command: /bin/openssl x509 -req -in /etc/tls/datanexus/postgresql/postgresql-client.csr -CA /etc/tls/datanexus/ca/ca-cert.pem -CAkey /etc/tls/datanexus/ca/ca-key.pem -out /etc/tls/datanexus/postgresql/postgresql-{{ encrypted_user }}.crt -CAcreateserial
#
#   - name: POSTGRESQL OPERATIONS | setting client key permissions
#     file:
#       path: "/etc/tls/datanexus/postgresql/{{ item }}"
#       owner: root
#       group: root
#       mode: 0600
#     with_items:
#       - "postgresql-{{ encrypted_user }}.key"
#       - "postgresql-{{ encrypted_user }}.crt"
#
#   - name: POSTGRESQL OPERATIONS | removing csr
#     file:
#       path: /etc/tls/datanexus/postgresql/postgresql-client.csr
#       state: absent
#
#   become: true
#   when: not client_key.stat.exists
