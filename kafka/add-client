#!/usr/bin/env ansible-playbook
# (c) 2016 DataNexus Inc.  All Rights Reserved.
#
# configure encrypted client-to-broker communications
# https://www.confluent.io/blog/apache-kafka-security-authorization-authentication-encryption/
---     
- name: discovering all {{ application }} nodes
  hosts: localhost
  tasks:
    - ec2_remote_facts:
        region: "{{ ec2_region }}"
        filters:
          instance-state-name: running
          "tag:Application": "{{ application }}"
          "tag:Domain": "{{ domain }}"
          "tag:Project": "{{ project }}"
          "tag:Tenant": "{{ tenant }}"
      register: kafka_instances
      when:
        - cloud == 'aws'

    - name: building {{ application }} host group
      add_host: hostname="{{ item }}" groupname="{{ application }}" ansible_ssh_private_key_file="{{ key_path }}/{{ cloud }}-{{ ec2_region }}-{{ project }}-{{ application }}-{{ domain }}-private-key.pem"
      with_items: "{{ kafka_instances.instances|map(attribute='private_ip_address')|list }}"
      when:
        - kafka_instances.instances|length > 0
    
    - ec2_remote_facts:
        region: "{{ ec2_region }}"
        filters:
          instance-state-name: running
          "tag:Application": shaw
          "tag:Domain": "{{ domain }}"
          "tag:Project": "{{ project }}"
          "tag:Tenant": "{{ tenant }}"
      register: shaw_instances
      when:
        - cloud == 'aws'

    - name: building shaw host group
      add_host: hostname="{{ item }}" groupname=shaw ansible_ssh_private_key_file="{{ key_path }}/{{ cloud }}-{{ ec2_region }}-{{ project }}-shaw-{{ domain }}-private-key.pem"
      with_items: "{{ shaw_instances.instances|map(attribute='private_ip_address')|list }}"
      when:
        - shaw_instances.instances|length > 0

- name: retrieving {{ application }} keystores and truststore
  hosts: shaw
  vars_files:
      - "{{ tenant_config_path }}/config/site.yml"
  gather_facts: yes
  tasks:
    - block:
      - name: fetching kafka client keystore
        fetch:
          src: /etc/tls/{{ tenant }}/kafka/kafka.client.keystore.jks
          dest: "{{ key_path }}/kafka.client.keystore.jks"
          flat: yes

      - name: fetching kafka client truststore
        fetch:
          src: /etc/tls/{{ tenant }}/kafka/kafka.client.truststore.jks
          dest: "{{ key_path }}/kafka.client.truststore.jks"
          flat: yes
      become: true
    
- name: configuring {{ application }} client encryption
  hosts: "{{ application }}"
  vars_files:
      - "{{ tenant_config_path }}/config/site.yml"
  gather_facts: yes
  tasks:
    - block:
      - name: checking existing server keystore
        stat:
          path: "/etc/tls/{{ tenant }}/{{ application }}"
        register: kafka_server_key
      
      - name: ensure TLS kafka directory is present
        file:
          path: /etc/tls/{{ tenant }}/{{ application }}
          state: directory
          mode: 0700
          owner: "{{ application }}"
          group: "{{ application }}"
        when: not kafka_server_key.stat.exists

      - name: distributing certificates to all cluster nodes
        copy:
          src:  "{{ item }}"
          dest: /etc/tls/{{ tenant }}/kafka/
          owner: "{{ application }}"
          group: "{{ application }}"
          mode: 0600
        with_items:
          - "{{ key_path }}/kafka.client.keystore.jks"
          - "{{ key_path }}/kafka.client.truststore.jks"
      become: true

- name: removing unused downloaded files
  hosts: localhost
  tasks:
    - name: removing {{ key_path }}/kafka.client.keystore.jks
      file:
        path: "{{ key_path }}/kafka.client.keystore.jks"
        state: absent
    
    - name: removing {{ key_path }}/kafka.server.truststore.jks
      file:
        path: "{{ key_path }}/kafka.server.truststore.jks"
        state: absent
        
- name: creating client configurations
  hosts: "{{ application }}"
  vars_files:
      - "{{ tenant_config_path }}/config/site.yml"
  gather_facts: yes
  tasks:
    - block:
      - name: checking kafka directory
        stat:
          path: /etc/kafka
        register: kafka_dir
      
      - name: ensure kafka directory is present
        file:
          path: /etc/kafka
          state: directory
          mode: 0700
          owner: "{{ application }}"
          group: "{{ application }}"
        when: not kafka_dir.stat.exists
      
      - name: setting eth0 to all interfaces
        set_fact:
          kafka_interface: "{{ hostvars[inventory_hostname].ansible_eth0.device }}"
          kakfa_interface_ipv4: "{{ hostvars[inventory_hostname].ansible_eth0.ipv4.address }}"
        when: hostvars[inventory_hostname].ansible_eth0 is defined

      - name: setting eth1 to kafka public internal
        set_fact:
          kafka_interface: "{{ hostvars[inventory_hostname].ansible_eth1.device }}"
          kafka_interface_ipv4: "{{ hostvars[inventory_hostname].ansible_eth1.ipv4.address }}"
        when: hostvars[inventory_hostname].ansible_eth1 is defined
        
      - name: enabling SSL for producers
        blockinfile:
          create: yes
          mode: 0600
          owner: "{{ application }}"
          group: "{{ application }}"
          path: /etc/kafka/producer_ssl.properties
          insertafter: EOF
          state: present
          block: |
            bootstrap.servers={{ kafka_interface_ipv4 }}:9093
            security.protocol=SSL
            ssl.truststore.location=/etc/tls/{{ tenant }}/{{ application }}/kafka.client.truststore.jks
            ssl.truststore.password={{ storepass }}
            ssl.keystore.location=/etc/tls/{{ tenant }}/{{ application }}/kafka.client.keystore.jks
            ssl.keystore.password={{ storepass }}
            ssl.key.password={{ keypass }}

      - name: enabling SSL for consumers
        blockinfile:
          create: yes
          mode: 0600
          owner: "{{ application }}"
          group: "{{ application }}"
          path: /etc/kafka/consumer_ssl.properties
          insertafter: EOF
          state: present
          block: |
            bootstrap.servers={{ kafka_interface_ipv4 }}:9093
            security.protocol=SSL
            ssl.truststore.location=/etc/tls/{{ tenant }}/{{ application }}/kafka.client.truststore.jks
            ssl.truststore.password={{ storepass }}
            ssl.keystore.location=/etc/tls/{{ tenant }}/{{ application }}/kafka.client.keystore.jks
            ssl.keystore.password={{ storepass }}
            ssl.key.password={{ keypass }}
      become: true
 