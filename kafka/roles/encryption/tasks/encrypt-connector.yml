# (c) 2016 DataNexus Inc.  All Rights Reserved.
# Licensed software not for distribution
#
# enable connector encryption
---
# these facts basically let us handle both apache and confluent
- set_fact:
    connect_user: "{{ (apache_kafka) | ternary(connect.distributed.apache.user, connect.distributed.confluent.user) }}"

- set_fact:
     connect_group: "{{ (apache_kafka) | ternary(connect.distributed.apache.group, connect.distributed.confluent.group) }}"

- set_fact:
    connect_service_name: "{{ (apache_kafka) | ternary(connect.distributed.apache.service_name, connect.distributed.confluent.service_name) }}"

- set_fact:
    connect_config_file: "{{ (apache_kafka) | ternary(connect.distributed.apache.config_file, connect.distributed.confluent.config_file) }}"

- block:
  
  - name: ENCRYPTION OVERLAY (CONNECT) | checking existing server keystore
    stat:
      path: "{{ shaw.config.tls_path }}/{{ tenant }}/{{ broker.application }}"
    register: kafka_server_key
  
  - name: ENCRYPTION OVERLAY (CONNECT) | ensure TLS {{ broker.application }} directory is present
    file:
      path: "{{ shaw.config.tls_path }}/{{ tenant }}/{{ broker.application }}"
      state: directory
      mode: 0755
      owner: "{{ connect_user }}"
      group: "{{ connect_group }}"
    when: not kafka_server_key.stat.exists

  - import_tasks: generate-client.yml
    vars:
      client_name: CONNECT
      client_owner: "{{ connect_user }}"
      client_group: "{{ connect_group }}"
      client_handler: connect
  
  # cap number of brokers in config at 5
  - name: ENCRYPTION OVERLAY (CONNECT) | configuring bootstrap servers
    lineinfile:
      path: "{{ connect_config_file }}"
      regexp: '^bootstrap.servers='
      line: "bootstrap.servers={{ groups['kafka_public'][:5] | join(':' + broker.config.sslPort + ',') }}:{{ broker.config.sslPort }}"
      insertafter: '^#bootstrap.servers='
    notify: restart connect
  
  - name: ENCRYPTION OVERLAY (CONNECT) | enabling SSL
    blockinfile:
      path: "{{ connect_config_file }}"
      marker: "# connect SSL {mark} ANSIBLE MANAGED BLOCK"
      insertafter: EOF
      state: present
      block: |
        security.protocol=SSL
        ssl.truststore.location={{ shaw.config.tls_path }}/{{ tenant }}/{{ broker.application }}/kafka.client.truststore.jks
        ssl.truststore.password={{ cert.storepass }}
        ssl.keystore.location={{ shaw.config.tls_path }}/{{ tenant }}/{{ broker.application }}/kafka.client.keystore.jks
        ssl.keystore.password={{ cert.storepass }}
        ssl.key.password={{ cert.keypass }}
    notify: restart connect
  
  - name: ENCRYPTION OVERLAY (CONNECT) | enabling SSL for producers
    blockinfile:
      path: "{{ connect_config_file }}"
      marker: "# producer SSL {mark} ANSIBLE MANAGED BLOCK"
      insertafter: EOF
      state: present
      block: |
        producer.bootstrap.servers={{ groups['kafka_public'][:5] | join(':' + broker.config.sslPort + ',') }}:{{ broker.config.sslPort }}
        producer.security.protocol=SSL
        producer.ssl.truststore.location={{ shaw.config.tls_path }}/{{ tenant }}/{{ broker.application }}/kafka.client.truststore.jks
        producer.truststore.password={{ cert.storepass }}
        producer.ssl.keystore.location={{ shaw.config.tls_path }}/{{ tenant }}/{{ broker.application }}/kafka.client.keystore.jks
        producer.ssl.keystore.password={{ cert.storepass }}
        producer.ssl.key.password={{ cert.keypass }}
    notify: restart connect

  # consumers for the replica cluster point to the source cluster
  - name: ENCRYPTION OVERLAY (CONNECT) | enabling SSL for consumers
    blockinfile:
      path: "{{ connect_config_file }}"
      marker: "# consumer SSL {mark} ANSIBLE MANAGED BLOCK"
      insertafter: EOF
      state: present
      block: |
        consumer.bootstrap.servers={{ (groups['controlcenter_public'] | default(groups['kafka_public']))[:5] | join(':' + broker.config.sslPort + ',') }}:{{ broker.config.sslPort }}
        consumer.security.protocol=SSL
        consumer.ssl.truststore.location={{ shaw.config.tls_path }}/{{ tenant }}/{{ broker.application }}/kafka.client.truststore.jks
        consumer.truststore.password={{ cert.storepass }}
        consumer.ssl.keystore.location={{ shaw.config.tls_path }}/{{ tenant }}/{{ broker.application }}/kafka.client.keystore.jks
        consumer.ssl.keystore.password={{ cert.storepass }}
        consumer.ssl.key.password={{ cert.keypass }}
    notify: restart connect

  - name: ENCRYPTION OVERLAY (CONNECT) | enabling SSL for monitoring producers
    blockinfile:
      path: "{{ connect_config_file }}"
      marker: "# monitoring producer SSL {mark} ANSIBLE MANAGED BLOCK"
      insertafter: EOF
      state: present
      block: |
        producer.confluent.monitoring.interceptor.bootstrap.servers={{ groups['kafka_public'][:5] | join(':' + broker.config.sslPort + ',') }}:{{ broker.config.sslPort }}
        producer.confluent.monitoring.interceptor.security.protocol=SSL
        producer.confluent.monitoring.interceptor.ssl.truststore.location={{ shaw.config.tls_path }}/{{ tenant }}/{{ broker.application }}/kafka.client.truststore.jks
        producer.confluent.monitoring.interceptor.ssl.truststore.password={{ cert.storepass }}
        producer.confluent.monitoring.interceptor.ssl.keystore.location={{ shaw.config.tls_path }}/{{ tenant }}/{{ broker.application }}/kafka.client.keystore.jks
        producer.confluent.monitoring.interceptor.ssl.keystore.password={{ cert.storepass }}
        producer.confluent.monitoring.interceptor.ssl.key.password={{ cert.keypass }}
    notify: restart connect

  - name: ENCRYPTION OVERLAY (CONNECT) | enabling SSL for monitoring consumers
    blockinfile:
      path: "{{ connect_config_file }}"
      marker: "# monitoring consumer SSL {mark} ANSIBLE MANAGED BLOCK"
      insertafter: EOF
      state: present
      block: |
        consumer.confluent.monitoring.interceptor.bootstrap.servers={{ (groups['controlcenter_public'] | default(groups['kafka_public']))[:5] | join(':' + broker.config.sslPort + ',') }}:{{ broker.config.sslPort }}
        consumer.confluent.monitoring.interceptor.security.protocol=SSL
        consumer.confluent.monitoring.interceptor.ssl.truststore.location={{ shaw.config.tls_path }}/{{ tenant }}/{{ broker.application }}/kafka.client.truststore.jks
        consumer.confluent.monitoring.interceptor.ssl.truststore.password={{ cert.storepass }}
        consumer.confluent.monitoring.interceptor.ssl.keystore.location={{ shaw.config.tls_path }}/{{ tenant }}/{{ broker.application }}/kafka.client.keystore.jks
        consumer.confluent.monitoring.interceptor.ssl.keystore.password={{ cert.storepass }}
        consumer.confluent.monitoring.interceptor.ssl.key.password={{ cert.keypass }}
    notify: restart connect
  
  become: "{{ got_root | default('yes') }}"
