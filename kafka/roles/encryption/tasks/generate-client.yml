# (c) 2016 DataNexus Inc.  All Rights Reserved.
# Licensed software not for distribution
#
# kafka client encryption
---
- block:
  
  - name: ENCRYPTION OVERLAY ({{ client_name }} CLIENT) | checking {{ shaw.config.tls_path }}/{{ tenant }}/ca for {{ broker.application }} TLS
    stat:
      path: "{{ shaw.config.tls_path }}/{{ tenant }}/ca"
    register: ca_dir

  - name: ENCRYPTION OVERLAY ({{ client_name }} CLIENT) | ensuring {{ shaw.config.tls_path }}/{{ tenant }}/ca exists for {{ broker.application }} TLS
    file:
      path: "{{ shaw.config.tls_path }}/{{ tenant }}/ca"
      state: directory
      mode: 0755
    when: not ca_dir.stat.exists
    
  - name: ENCRYPTION OVERLAY ({{ client_name }} CLIENT) | checking {{ shaw.config.tls_path }}/{{ tenant }}/{{ broker.application }} for {{ broker.application }} TLS
    stat:
      path: "{{ shaw.config.tls_path }}/{{ tenant }}/{{ broker.application }}"
    register: broker_dir

  - name: ENCRYPTION OVERLAY ({{ client_name }} CLIENT) | ensuring {{ shaw.config.tls_path }}/{{ tenant }}/{{ broker.application }} exists for {{ broker.application }} TLS
    file:
      path: "{{ shaw.config.tls_path }}/{{ tenant }}/{{ broker.application }}"
      state: directory
      mode: 0755
    when: not broker_dir.stat.exists
  
  - name: ENCRYPTION OVERLAY ({{ client_name }} CLIENT) | removing existing CA credentials
    file:
      path: "{{ shaw.config.tls_path }}/{{ tenant }}/ca/{{ item }}"
      state: absent
    with_items:
      - ca-cert
      - ca-key
    when: regenerate_certs
  
  - name: ENCRYPTION OVERLAY ({{ client_name }} CLIENT) | checking existing {{ shaw.config.tls_path }}/{{ tenant }}/ca/ca-cert
    stat:
      path: "{{ shaw.config.tls_path }}/{{ tenant }}/ca/ca-cert"
    register: existing_ca_cert
  
  - name: ENCRYPTION OVERLAY ({{ client_name }} CLIENT) | distributing required CA files to all clients
    copy:
      src: "{{ item }}"
      dest: "{{ shaw.config.tls_path }}/{{ tenant }}/ca/"
      owner: "{{ client_owner }}"
      group: "{{ client_group }}"
      mode: 0600
    with_items:
      - "{{ key_path }}/ca-cert"
      - "{{ key_path }}/ca-key"
    when:
      - not existing_ca_cert.stat.exists
    notify: restart {{ client_handler }}
    
  - name: ENCRYPTION OVERLAY ({{ client_name }} CLIENT) | removing existing {{ broker.application }} files 
    file:
      path: "{{ shaw.config.tls_path }}/{{ tenant }}/{{ broker.application }}/{{ item }}"
      state: absent
    with_items:
      - kafka.client.keystore.jks
      - kafka.client.truststore.jks
      - signed-client-cert
      - unsigned-client-request
      - openssl.cnf
      - client-ssl.properties
    when: regenerate_certs

  - name: ENCRYPTION OVERLAY ({{ client_name }} CLIENT) | checking existing client truststore
    stat:
      path: "{{ shaw.config.tls_path }}/{{ tenant }}/{{ broker.application }}/kafka.client.truststore.jks"
    register: kafka_client_trust
      
  - name: ENCRYPTION OVERLAY ({{ client_name }} CLIENT) | importing CA certificate into kafka.client.truststore.jks truststore
    command: keytool -keystore {{ shaw.config.tls_path }}/{{ tenant }}/{{ broker.application }}/kafka.client.truststore.jks -alias CARoot -import -file {{ shaw.config.tls_path }}/{{ tenant }}/ca/ca-cert -storepass {{ cert.storepass }} -keypass {{ cert.keypass }} -noprompt
    when: not kafka_client_trust.stat.exists
  
  - name: ENCRYPTION OVERLAY ({{ client_name }} CLIENT) | checking existing kafka.client.truststore.jks keystore
    stat:
      path: "{{ shaw.config.tls_path }}/{{ tenant }}/{{ broker.application }}/kafka.client.keystore.jks"
    register: kafka_client_key
    
  - name: ENCRYPTION OVERLAY ({{ client_name }} CLIENT) | generating kafka.client.keystore.jks keystore
    command: keytool -keystore {{ shaw.config.tls_path }}/{{ tenant }}/{{ broker.application }}/kafka.client.keystore.jks -alias localhost -validity {{ cert.duration }} -genkey -keyalg RSA -storepass {{ cert.storepass }} -keypass {{ cert.keypass }} -dname "CN={{ cert.CN }}, OU={{ cert.OU }}, O={{ cert.O }}, L={{ cert.L }}, C={{ cert.C }}"
    when: not kafka_client_key.stat.exists
  
  - name: ENCRYPTION OVERLAY ({{ client_name }} CLIENT) | checking existing {{ shaw.config.tls_path }}/{{ tenant }}/{{ broker.application }}/unsigned-client-request
    stat:
      path: "{{ shaw.config.tls_path }}/{{ tenant }}/{{ broker.application }}/unsigned-client-request"
    register: unsigned_request
    
  - name: ENCRYPTION OVERLAY ({{ client_name }} CLIENT) | creating signing request from client keystore
    command: keytool -keystore {{ shaw.config.tls_path }}/{{ tenant }}/{{ broker.application }}/kafka.client.keystore.jks -alias localhost -certreq -ext SAN=IP:{{ groups['kafka_public'] | join(',' +  'IP:') }} -file {{ shaw.config.tls_path }}/{{ tenant }}/{{ broker.application }}/unsigned-client-request -storepass {{ cert.storepass }} -keypass {{ cert.keypass }}
    when: not unsigned_request.stat.exists
    
  - name: ENCRYPTION OVERLAY ({{ client_name }} CLIENT) | checking existing {{ shaw.config.tls_path }}/{{ tenant }}/{{ broker.application }}/signed-client-cert
    stat:
      path: "{{ shaw.config.tls_path }}/{{ tenant }}/{{ broker.application }}/signed-client-cert"
    register: signed_cert
    
  - name: ENCRYPTION OVERLAY ({{ client_name }} CLIENT) | signing client certificate with CA private key
    command: openssl x509 -req -CA {{ shaw.config.tls_path }}/{{ tenant }}/ca/ca-cert -CAkey {{ shaw.config.tls_path }}/{{ tenant }}/ca/ca-key -in {{ shaw.config.tls_path }}/{{ tenant }}/{{ broker.application }}/unsigned-client-request -out {{ shaw.config.tls_path }}/{{ tenant }}/{{ broker.application }}/signed-client-cert -days {{ cert.duration }} -CAcreateserial -passin pass:{{ cert.keypass }}
    when: not signed_cert.stat.exists
    
  - name: ENCRYPTION OVERLAY ({{ client_name }} CLIENT) | importing CA certificate into client keystore
    command: keytool -keystore {{ shaw.config.tls_path }}/{{ tenant }}/{{ broker.application }}/kafka.client.keystore.jks -alias CARoot -import -file {{ shaw.config.tls_path }}/{{ tenant }}/ca/ca-cert -storepass {{ cert.storepass }} -keypass {{ cert.keypass }} -noprompt
    when: not kafka_client_key.stat.exists

  - name: ENCRYPTION OVERLAY ({{ client_name }} CLIENT) | importing signed certificate into client keystore
    command: keytool -keystore {{ shaw.config.tls_path }}/{{ tenant }}/{{ broker.application }}/kafka.client.keystore.jks -alias localhost -import -file {{ shaw.config.tls_path }}/{{ tenant }}/{{ broker.application }}/signed-client-cert -storepass {{ cert.storepass }} -keypass {{ cert.keypass }} -noprompt
    when: not kafka_client_key.stat.exists
  
  - name: ENCRYPTION OVERLAY ({{ client_name }} CLIENT) | removing unnecessary files
    file:
      path: "{{ shaw.config.tls_path }}/{{ tenant }}/ca/{{ item }}"
      state: absent
    with_items:
      - ca-cert.srl
    when: cleanup
      
  become: "{{ got_root | default('yes') }}"
