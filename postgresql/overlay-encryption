#!/usr/bin/env ansible-playbook
# (c) 2016 DataNexus Inc.  All Rights Reserved.
#
# overlay master-to-replica, client-to-server encryption over top of an existing postgresql cluster
---
- name: POSTGRESQL ENCRYPTION OVERLAY | discovering postgresql replicas
  hosts: localhost
  tasks:
    - block:
      - ec2_instance_facts:
          region: "{{ region }}"
          filters:
            instance-state-name: running
            "tag:Tenant": "{{ tenant }}"
            "tag:Project": "{{ project }}"
            "tag:Domain": "{{ domain }}"
            "tag:Application": postgresql
            "tag:Role": replica
            "tag:Cluster": "{{ cluster | default ('a') }}"
            "tag:Dataflow": "{{ dataflow | default ('none') }}"
        register: postgresql_replica_instances
  
      - name: POSTGRESQL ENCRYPTION OVERLAY | building postgresql replica host group
        add_host: hostname="{{ item }}" groupname=postgresql_replica ansible_ssh_private_key_file="{{ key_path }}/{{ cloud }}-{{ region }}-{{ project }}-postgresql-{{ domain }}-private-key.pem"
        with_items: "{{ postgresql_replica_instances.instances | map(attribute='private_ip_address') | list }}"
        when:
          - postgresql_replica_instances is defined
          - postgresql_replica_instances.instances | length > 0
 
      when:
        - cloud == 'aws'

- name: POSTGRESQL ENCRYPTION OVERLAY | discovering shaw
  hosts: localhost
  tasks:
    - block:
      - ec2_instance_facts:
          region: "{{ region }}"
          filters:
            instance-state-name: running
            "tag:Domain": "{{ domain }}"
            "tag:Project": "{{ project }}"
            "tag:Tenant": "{{ tenant }}"
            "tag:Application": shaw
        register: shaw_instances

      - name: POSTGRESQL ENCRYPTION OVERLAY | building shaw host group
        add_host: hostname="{{ item }}" groupname=shaw ansible_ssh_private_key_file="{{ key_path }}/{{ cloud }}-{{ region }}-{{ project }}-shaw-{{ domain }}-private-key.pem"
        with_items: "{{ shaw_instances.instances | map(attribute='private_ip_address') | list }}"
        when:
          - shaw_instances is defined
          - shaw_instances.instances | length > 0
      when:
        - cloud == 'aws'

- name: POSTGRESQL ENCRYPTION OVERLAY | shaw
  hosts: shaw
  gather_facts: yes
  tasks:
    - include_vars: "{{ application_path }}/vars/postgresql.yml"
      when: application_path is defined

    - include_role:
        name: clients
        tasks_from: generate-credentials
      vars:
        encrypted_user: "{{ postgresql_user }}"   

    - include_role:
        name: clients
        tasks_from: fetch-credentials
      vars:
        src_path: /etc/tls/datanexus/ca
        dst_path: "{{ key_path }}"
        subject: CA
      with_items:
        - ca-cert.pem
        - ca-key.pem

    - include_role:
        name: clients
        tasks_from: fetch-credentials
      vars:
        src_path: /etc/tls/datanexus/postgresql
        dst_path: "{{ key_path }}"
        subject: "{{ postgresql_user }}"
      with_items:
        - postgresql-{{ postgresql_user }}.crt
        - postgresql-{{ postgresql_user }}.key

    # we only execute if there is a replica
    - block:
      - set_fact: replica_account="{{ item.name }}"
        with_items: "{{ replication_users }}"

      - include_role:
          name: clients
          tasks_from: generate-credentials
        vars:
          encrypted_user: "{{ replica_account }}"

      - include_role:
          name: clients
          tasks_from: fetch-credentials
        vars:
          src_path: /etc/tls/datanexus/postgresql
          dst_path: "{{ key_path }}"
          subject: "{{ replica_account }}"
        with_items:
          - postgresql-{{ replica_account }}.crt
          - postgresql-{{ replica_account }}.key
      when: 
        - groups['postgresql_replica'] is defined
        - groups['postgresql_replica'] | length > 0

- name: POSTGRESQL ENCRYPTION OVERLAY | discovering all postgresql instances
  hosts: localhost
  tasks:
    - block:
      - ec2_instance_facts:
          region: "{{ region }}"
          filters:
            instance-state-name: running
            "tag:Tenant": "{{ tenant }}"
            "tag:Project": "{{ project }}"
            "tag:Domain": "{{ domain }}"
            "tag:Application": postgresql
            "tag:Cluster": "{{ cluster | default ('a') }}"
            "tag:Dataflow": "{{ dataflow | default ('none') }}"
        register: postgresql_instances

      - name: POSTGRESQL ENCRYPTION OVERLAY | building postgresql host group
        add_host: hostname="{{ item }}" groupname=postgresql ansible_ssh_private_key_file="{{ key_path }}/{{ cloud }}-{{ region }}-{{ project }}-postgresql-{{ domain }}-private-key.pem"
        with_items: "{{ postgresql_instances.instances | map(attribute='private_ip_address') | list }}"
        when:
          - postgresql_instances is defined
          - postgresql_instances.instances | length > 0
      when:
        - cloud == 'aws'

- name: POSTGRESQL ENCRYPTION OVERLAY | all postgresql instances
  hosts: postgresql
  gather_facts: yes
  tasks:
    # note the obviuous dependecy on having access to the postgresql repo code
    - include_vars: "{{ application_path }}/vars/postgresql.yml"
      when: application_path is defined
      
    - include_tasks: "{{ application_path }}/roles/postgresql/tasks/interface-facts.yml"
      when: application_path is defined

    - include_vars: "{{ application_path }}/vars/postgresql.yml"
      when: application_path is defined

    - block:
      - name: POSTGRESQL ENCRYPTION OVERLAY | distributing CA certificates to all cluster nodes
        copy:
          src:  "{{ key_path }}/{{ item }}"
          dest: "{{ postgresql_data_dir }}"
          owner: "{{ postgresql_user }}"
          group: "{{ postgresql_user }}"
          mode: 0600
        with_items:
            - ca-cert.pem
            - ca-key.pem

      - name: POSTGRESQL ENCRYPTION OVERLAY | ensuring PostgreSQL preferences directory exists
        file:
          path: "{{ postgresql_home_dir }}/.postgresql"
          owner: "{{ postgresql_user }}"
          group: "{{ postgresql_group }}"
          state: directory
          mode: 0700

      - name: POSTGRESQL ENCRYPTION OVERLAY | distributing {{ postgresql_user }} key to all cluster nodes
        copy:
          src:  "{{ key_path }}/postgresql-{{ postgresql_user }}.key"
          dest: "{{ postgresql_home_dir }}/.postgresql/postgresql.key"
          owner: "{{ postgresql_user }}"
          group: "{{ postgresql_user }}"
          mode: 0600

      - name: POSTGRESQL ENCRYPTION OVERLAY | distributing {{ postgresql_user }} certificate to all cluster nodes
        copy:
          src:  "{{ key_path }}/postgresql-{{ postgresql_user }}.crt"
          dest: "{{ postgresql_home_dir }}/.postgresql/postgresql.crt"
          owner: "{{ postgresql_user }}"
          group: "{{ postgresql_user }}"
          mode: 0600

      - name: POSTGRESQL ENCRYPTION OVERLAY | distributing trusted CA certificate to all cluster nodes
        copy:
          src:  "{{ key_path }}/ca-cert.pem"
          dest: "{{ postgresql_home_dir }}/.postgresql/root.crt"
          owner: "{{ postgresql_user }}"
          group: "{{ postgresql_user }}"
          mode: 0600

      - name: POSTGRESQL ENCRYPTION OVERLAY | checking if existing certs are present
        stat:
          path: "{{ postgresql_data_dir}}/ca-cert.pem"
        register: pgdata_server_key

      - name: POSTGRESQL ENCRYPTION OVERLAY | turn on SSL
        lineinfile:
          dest: "{{ postgresql_config_path }}/postgresql.conf"
          regexp: "^#ssl = off"
          backrefs: yes
          line: "ssl = on\t\t\t\t# (change requires restart)"
        when:
          - pgdata_server_key.stat.exists

      - name: POSTGRESQL ENCRYPTION OVERLAY | configuring postgresql SSL cert file
        lineinfile:
          dest: "{{ postgresql_config_path }}/postgresql.conf"
          regexp: "^#ssl_cert_file ="
          backrefs: yes
          line: "ssl_cert_file = 'ca-cert.pem'\t\t# (change requires restart)"
        when:
          - pgdata_server_key.stat.exists

      - name: POSTGRESQL ENCRYPTION OVERLAY | configuring postgresql SSL key file
        lineinfile:
          dest: "{{ postgresql_config_path }}/postgresql.conf"
          regexp: "^#ssl_key_file ="
          backrefs: yes
          line: "ssl_key_file = 'ca-key.pem'\t\t# (change requires restart)"
        when:
          - pgdata_server_key.stat.exists

      - name: POSTGRESQL ENCRYPTION OVERLAY | configure CA root certificate
        lineinfile:
          dest: "{{ postgresql_config_path }}/postgresql.conf"
          regexp: "^#ssl_ca_file ="
          backrefs: yes
          line: "ssl_ca_file = 'ca-cert.pem'\t\t# (change requires restart)"
        when:
          - pgdata_server_key.stat.exists

      - name: POSTGRESQL ENCRYPTION OVERLAY | setting trusted listener on data network
        lineinfile:
          dest: "{{ postgresql_config_path }}/pg_hba.conf"
          regexp: "^host    all             {{ postgresql_user }}        {{ postgresql_broadcast_interface_ipv4 }}/24          trust"
          backrefs: yes
          line: "hostssl all             {{ postgresql_user }}        {{ postgresql_broadcast_interface_ipv4 }}/24          cert clientcert=1"
        when:
          - pgdata_server_key.stat.exists

      - name: POSTGRESQL ENCRYPTION OVERLAY | restarting postgresql to effect changes
        systemd: "name={{ postgresql_daemon }} state=restarted daemon_reload=yes"   

      become: true

- name: POSTGRESQL ENCRYPTION OVERLAY | discovering postgresql masters
  hosts: localhost
  tasks:
    - block:
      - ec2_instance_facts:
          region: "{{ region }}"
          filters:
            instance-state-name: running
            "tag:Tenant": "{{ tenant }}"
            "tag:Project": "{{ project }}"
            "tag:Domain": "{{ domain }}"
            "tag:Application": postgresql
            "tag:Role": master
            "tag:Cluster": "{{ cluster | default ('a') }}"
            "tag:Dataflow": "{{ dataflow | default ('none') }}"
        register: postgresql_master_instances

      - name: POSTGRESQL ENCRYPTION OVERLAY | building postgresql replica host group
        add_host: hostname="{{ item }}" groupname=postgresql_master ansible_ssh_private_key_file="{{ key_path }}/{{ cloud }}-{{ region }}-{{ project }}-postgresql-{{ domain }}-private-key.pem"
        with_items: "{{ postgresql_master_instances.instances | map(attribute='private_ip_address') | list }}"
        when:
          - postgresql_master_instances is defined
          - postgresql_master_instances.instances | length > 0

      when:
        - cloud == 'aws'

- hosts: postgresql_master
  gather_facts: yes
  tasks:
    # note the obviuous dependecy on having access to the postgresql repo code
    - include_vars: "{{ application_path }}/vars/postgresql.yml"
      when: application_path is defined

    - include_tasks: "{{ application_path }}/roles/postgresql/tasks/interface-facts.yml"
      when: application_path is defined
      # if there is an replica then enable encryption
    - block:  
      - name: POSTGRESQL MASTER ENCRYPTION OVERLAY | setting replication access on data network
        lineinfile:
          dest: "{{ postgresql_config_path }}/pg_hba.conf"
          regexp: "^host     replication     replicator      10.10.2."
          backrefs: yes
          line: "hostssl replication     replicator      {{ hostvars[item].ansible_eth1.ipv4.address }}/32           cert clientcert=1"
        with_items: "{{ groups.postgresql_replica }}"

      - name: POSTGRESQL MASTER ENCRYPTION OVERLAY | restarting postgresql to effect changes
        systemd: "name={{ postgresql_daemon }} state=restarted daemon_reload=yes"

      become: true 
      when: 
        - groups['postgresql_replica'] is defined
        - groups['postgresql_replica'] | length > 0

- hosts: postgresql_replica
  gather_facts: yes
  tasks:
    # note the obviuous dependecy on having access to the postgresql repo code
    - include_vars: "{{ application_path }}/vars/postgresql.yml"
      when: application_path is defined

    - include_tasks: "{{ application_path }}/roles/postgresql/tasks/interface-facts.yml"
      when: application_path is defined      

    - set_fact: replica_account="{{ item.name }}"
      with_items: "{{ replication_users }}"

    - block:

      - name: POSTGRESQL REPLICA ENCRYPTION OVERLAY | ensuring PostgreSQL preferences directory exists
        file:
          path: "{{ postgresql_home_dir }}/.postgresql"
          owner: "{{ postgresql_user }}"
          group: "{{ postgresql_group }}"
          state: directory
          mode: 0700

      - name: POSTGRESQL REPLICA ENCRYPTION OVERLAY | distributing {{ replica_account }} key to replica nodes
        copy:
          src:  "{{ key_path }}/postgresql-{{ replica_account }}.key"
          dest: "{{ postgresql_home_dir }}/.postgresql/{{ replica_account }}.key"
          owner: "{{ postgresql_user }}"
          group: "{{ postgresql_user }}"
          mode: 0600

      - name: POSTGRESQL REPLICA ENCRYPTION OVERLAY | distributing {{ replica_account }} certificate to replica nodes
        copy:
          src:  "{{ key_path }}/postgresql-{{ replica_account }}.crt"
          dest: "{{ postgresql_home_dir }}/.postgresql/{{ replica_account }}.crt"
          owner: "{{ postgresql_user }}"
          group: "{{ postgresql_user }}"
          mode: 0600

      - name: POSTGRESQL REPLICA ENCRYPTION OVERLAY | enabling encryption in recovery file
        blockinfile:
          name: "{{ postgresql_config_path }}/recovery.conf"
          mode: 0600
          create: yes
          block: |
            standby_mode = 'on'
            primary_conninfo = 'host={{ hostvars[item].ansible_eth1.ipv4.address }} port=5432 user=replicator sslmode=require sslcert={{ postgresql_home_dir }}/.postgresql/{{ replica_account }}.crt sslkey={{ postgresql_home_dir }}/.postgresql/{{ replica_account }}.key'
            trigger_file = '/tmp/postgresql.trigger'
        with_items: "{{ groups.postgresql_master }}"

      become_user: "{{ postgresql_user | default('postgres')}}"
      become: true
      when: 
        - groups['postgresql_master'] is defined
        - groups['postgresql_master'] | length > 0

    - name: POSTGRESQL REPLICA ENCRYPTION OVERLAY | restarting postgresql to effect changes
      systemd: "name={{ postgresql_daemon }} state=restarted daemon_reload=yes"
      become: true
