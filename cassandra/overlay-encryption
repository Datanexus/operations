#!/usr/bin/env ansible-playbook
# (c) 2016 DataNexus Inc.  All Rights Reserved.
#
# overlay node-to-node and client-to-node encryption over top of an existing cluster
---     
- name: discovering all {{ application }} nodes
  hosts: localhost
  tasks:
    - ec2_remote_facts:
        region: "{{ ec2_region }}"
        filters:
          instance-state-name: running
          "tag:Application": "{{ application }}"
          "tag:Domain": "{{ domain }}"
          "tag:Project": "{{ project }}"
          "tag:Tenant": "{{ tenant }}"
      register: cassandra_instances
      when:
        - cloud == 'aws'

    - name: building {{ application }} host group
      add_host: hostname="{{ item }}" groupname="{{ application }}" ansible_ssh_private_key_file="{{ key_path }}/{{ cloud }}-{{ ec2_region }}-{{ project }}-{{ application }}-{{ domain }}-private-key.pem"
      with_items: "{{ cassandra_instances.instances|map(attribute='private_ip_address')|list }}"
      when:
        - cloud == 'aws'
        - cassandra_instances.instances|length > 0
    
    - ec2_remote_facts:
        region: "{{ ec2_region }}"
        filters:
          instance-state-name: running
          "tag:Application": shaw
          "tag:Domain": "{{ domain }}"
          "tag:Project": "{{ project }}"
          "tag:Tenant": "{{ tenant }}"
      register: shaw_instances
      when:
        - cloud == 'aws'

    - name: building shaw host group
      add_host: hostname="{{ item }}" groupname=shaw ansible_ssh_private_key_file="{{ key_path }}/{{ cloud }}-{{ ec2_region }}-{{ project }}-shaw-{{ domain }}-private-key.pem"
      with_items: "{{ shaw_instances.instances|map(attribute='private_ip_address')|list }}"
      when:
        - shaw_instances.instances|length > 0

- name: install JCE packages for {{ application }} encryption
  hosts: "{{ application }}"
  vars_files:
      - vars/{{ application }}.yml
      - "{{ tenant_config_path }}/config/site.yml"
  gather_facts: yes
  roles:
    - { role: install-packages, package_list: ['epel-release-7-9'], when: ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat' }

- name: creating {{ application }} keystores and truststores
  hosts: shaw
  vars_files:
      - vars/{{ application }}.yml
      - "{{ tenant_config_path }}/config/site.yml"
  gather_facts: yes
  tasks:
    - name: checking TLS directory structure on {{ inventory_hostname }}
      stat:
        path: /etc/tls/datanexus/cassandra
      become: true
      register: cassandra_dir

    - name: ensure path is present on {{ inventory_hostname }}
      file:
          path: /etc/tls/datanexus/cassandra
          state: directory
          mode: 0700
      become: true
      when: not cassandra_dir.stat.exists
      
    - name: generating public/private keypair keystore on {{ inventory_hostname }}
      command: /usr/bin/keytool -genkey -keyalg RSA -alias localhost -keystore /etc/tls/datanexus/cassandra/cassandra.server.keystore.jks -storepass {{ storepass }} -keypass {{ keypass }} -dname "CN={{ certs.CN }}, OU={{ certs.OU }}, O={{ certs.O }}, L={{ certs.L }}, C={{ certs.C }}"
      become: true
    
    - name: checking existing public/private keypair on {{ inventory_hostname }}
      stat:
        path: "/etc/tls/datanexus/cassandra/ca-cert"
      become: true
      register: cassandra_server_cer
      
    - name: generating CA private key and self-signed certificate on {{ inventory_hostname }}
      command: /usr/bin/keytool -export -alias localhost -file /etc/tls/datanexus/cassandra/ca-cert -keystore /etc/tls/datanexus/cassandra/cassandra.server.keystore.jks -storepass {{ storepass }}
      become: true
      when: not cassandra_server_cer.stat.exists
      
    - name: importing public certificate into keystore on {{ inventory_hostname }}
      command: /usr/bin/keytool -import -v -trustcacerts -alias CARoot -file /etc/tls/datanexus/cassandra/ca-cert -keystore /etc/tls/datanexus/cassandra/cassandra.server.keystore.jks
      become: true
    
    - name: importing public certificates into node truststore on {{ inventory_hostname }}
      command: /usr/bin/keytool -import -v -trustcacerts -alias CARoot -file /etc/tls/datanexus/cassandra/ca-cert -keystore /etc/tls/datanexus/cassandra/cassandra.server.truststore.jks -storepass {{ storepass }} -noprompt
      become: true
      
    # - name: checking existing of PKCS keystore
    #   stat:
    #     path: "/etc/tls/datanexus/cassandra/cassandra.server.keystore.p12"
    #   register: cassandra_server_p12
        
    - name: creating PKCS keystore from existing keystore on {{ inventory_hostname }}
      command: /usr/bin/keytool -importkeystore -srckeystore /etc/tls/datanexus/cassandra/cassandra.server.keystore.jks -destkeystore /etc/tls/datanexus/cassandra/cassandra.server.keystore.p12 -deststoretype PKCS12 -srcstorepass {{ storepass }} -deststorepass {{ storepass }}
      become: true
      # when: not cassandra_server_p12.stat.exists
    
    # - name: checking existing node certificate PEM
#       stat:
#         path: "/etc/tls/datanexus/cassandra/cassandra.client.pem"
#       register: cassandra_server_pem
      
    - name: extracting CQLSH certificate PEM with no keys on {{ inventory_hostname }}
      command: /usr/bin/openssl pkcs12 -in /etc/tls/datanexus/cassandra/cassandra.server.keystore.p12 -nokeys -out /etc/tls/datanexus/cassandra/cassandra.client.pem -passin pass:{{ keypass }}
      become: true
      # when: not cassandra_server_pem.stat.exists
    
    # this doesn't appear to have any use
    # - name: extracting CQLSH certificate PEM with no certs
    #   command: /usr/bin/openssl pkcs12 -in /etc/tls/datanexus/cassandra/cassandra.server.keystore.p12 -nodes -nocerts -out /etc/tls/datanexus/cassandra/cassandra.client.key.pem -passin pass:{{ keypass}}
    #   become: true
    #   when: not cassandra_server_pem.stat.exists

    # this makes logical sense but doesn't have any effect
    - name: importing user certificate into node truststore on {{ inventory_hostname }}
      command: /usr/bin/keytool -import -v -trustcacerts -alias user -file /etc/tls/datanexus/cassandra/cassandra.client.pem -keystore /etc/tls/datanexus/cassandra/cassandra.server.truststore.jks -storepass {{ storepass }} -noprompt
      become: true
      
    - name: fetching client certificate from certificate authority from {{ inventory_hostname }}
      fetch:
        src: /etc/tls/datanexus/cassandra/cassandra.client.pem
        dest: "{{ key_path }}/cassandra.client.pem"
        flat: yes
      become: yes

    - name: fetching server keystore from certficate server from {{ inventory_hostname }}
      fetch:
        src: /etc/tls/datanexus/cassandra/cassandra.server.keystore.jks 
        dest: "{{ key_path }}/cassandra.server.keystore.jks"
        flat: yes
      become: yes  

    - name: fetching server truststore from certficate server from {{ inventory_hostname }}
      fetch:
        src: /etc/tls/datanexus/cassandra/cassandra.server.truststore.jks 
        dest: "{{ key_path }}/cassandra.server.truststore.jks"
        flat: yes
      become: yes

- name: configuring {{ application }} encryption
  hosts: "{{ application }}"
  vars_files:
      - vars/{{ application }}.yml
      - "{{ tenant_config_path }}/config/site.yml"
  gather_facts: yes
  tasks:
    - name: copying keystore to all cluster nodes
      copy:
        src:  "{{ key_path }}/cassandra.server.keystore.jks"
        dest: /etc/tls/datanexus/cassandra/
        owner: "{{ application }}"
        group: "{{ application }}"
        mode: 0600
      become: true

    - name: copying truststore to all cluster nodes
      copy:
        src:  "{{ key_path }}/cassandra.server.truststore.jks"
        dest: /etc/tls/datanexus/cassandra/
        owner: "{{ application }}"
        group: "{{ application }}"
        mode: 0600
      become: true

    # - name: deleting any existing certs from node truststore
    #   command: /usr/bin/keytool -delete -v -alias CARoot -keystore /etc/tls/datanexus/cassandra/cassandra.server.truststore.jks -storepass {{ storepass }} -noprompt
    #   become_user: "{{ application }}"
    #   become: true
    #   when: cassandra_server_trust.stat.exists

    - replace:
        path: /opt/apache-cassandra/conf/cassandra.yaml
        regexp: "{{ item.regexp }}"
        replace: "{{ item.replace }}"
      become_user: "{{ application }}"
      become: true
      with_items:
        - { regexp: '    internode_encryption: none', replace: '    internode_encryption: all' }
        - { regexp: '    keystore: conf/.keystore', replace: '    keystore: /etc/tls/datanexus/cassandra/cassandra.server.keystore.jks' }
        - { regexp: '    keystore_password: cassandra', replace: '    keystore_password: {{ storepass }}' }
        - { regexp: '    truststore: conf/.truststore', replace: '    truststore: /etc/tls/datanexus/cassandra/cassandra.server.truststore.jks' }
        - { regexp: '    truststore_password: cassandra', replace: '    truststore_password: {{ storepass }}' }
        - { regexp: '    # protocol: TLS', replace: '    protocol: TLS' }
        - { regexp: '    # algorithm: SunX509', replace: '    algorithm: SunX509' }
        - { regexp: '    # store_type: JKS', replace: '    store_type: JKS' }
        - { regexp: '    # cipher_suites: \[TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA,TLS_DHE_RSA_WITH_AES_128_CBC_SHA,TLS_DHE_RSA_WITH_AES_256_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\]', replace: '    cipher_suites: [TLS_RSA_WITH_AES_256_CBC_SHA]' }
       # - { regexp: '    # require_client_auth: false', replace: '    require_client_auth: true' }

    - replace:
        path: /opt/apache-cassandra/conf/cassandra.yaml
        regexp: "{{ item.regexp }}"
        replace: "{{ item.replace }}"
      become_user: "{{ application }}"
      become: true
      with_items:
        - { regexp: 'client_encryption_options:\n    enabled: false', replace: 'client_encryption_options:\n    enabled: true' }
        - { regexp: '    # truststore: conf/.truststore', replace: '    truststore: /etc/tls/datanexus/cassandra/cassandra.server.truststore.jks' }
        - { regexp: '    # truststore_password: cassandra', replace: '    truststore_password: {{ storepass }}' }

    - name: ensuring cassandra configuration is protected
      file:
        path: /opt/apache-cassandra/conf/cassandra.yaml
        state: file
        mode: 0600
      become_user: "{{ application }}"
      become: true

    - name: restart cassandra
      become: yes
      systemd: "name=cassandra.service state=restarted daemon_reload=yes"

- name: removing unneeded downloaded files
  hosts: localhost
  tasks:
    - name: removing {{ key_path }}/cassandra.server.keystore.jks
      file:
        path: "{{ key_path }}/cassandra.server.keystore.jks"
        state: absent

    - name: removing {{ key_path }}/cassandra.server.truststore.jks
      file:
        path: "{{ key_path }}/cassandra.server.truststore.jks"
        state: absent
