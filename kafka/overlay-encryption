#!/usr/bin/env ansible-playbook
# (c) 2016 DataNexus Inc.  All Rights Reserved.
#
# overlay broker-to-broker, client-to-broker encryption over top of an existing kafka cluster
# https://www.confluent.io/blog/apache-kafka-security-authorization-authentication-encryption/
---
- name: ENCRYPTION OVERLAY (KAFKA) | discovering {{ cloud }} networking
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - include_role:
        name: aws
        tasks_from: discover-vpc
      when: cloud == 'aws'

    - include_role:
        name: azure
        tasks_from: discover-resourcegroup
      when: cloud == 'azure'

- name: ENCRYPTION OVERLAY (KAFKA) | creating {{ cloud }} security groups
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - include_role:
        name: aws
        tasks_from: create-securitygroup
      when: cloud == 'aws'

- name: ENCRYPTION OVERLAY (KAFKA) | applying {{ cloud }} security groups
  hosts: localhost
  connection: local
  gather_facts: yes
  tasks:
    - include_role:
        name: aws
        tasks_from: apply-securitygroup
      when: cloud == 'aws'

    - include_role:
        name: azure
        tasks_from: modify-existing-securitygroup
      when: cloud == 'azure'
      
- name: ENCRYPTION OVERLAY (KAFKA) | discovering all kafka broker nodes
  hosts: localhost
  vars_files:
    - roles/encryption/defaults/main.yml
  tasks:
    - ec2_instance_facts:
        region: "{{ region }}"
        filters:
          instance-state-name: running
          "tag:Application": kafka-broker
          "tag:Domain": "{{ domain }}"
          "tag:Project": "{{ project }}"
          "tag:Tenant": "{{ tenant }}"
      register: kafka_instances
      when:
        - groups['kafka-broker'] is not defined
        - cloud == 'aws'
    
    - name: ENCRYPTION OVERLAY (KAFKA) | building kafka broker host group
      add_host: hostname="{{ item }}" groupname=kafka-broker ansible_ssh_private_key_file="{{ key_path }}/{{ cloud }}-{{ region }}-{{ project }}-{{ broker.application }}-{{ domain }}-private-key.pem"
      with_items: "{{ kafka_instances.instances|map(attribute='private_ip_address')|list }}"
      when:
        - kafka_instances.instances is defined
        - kafka_instances.instances | length > 0
    
    - ec2_instance_facts:
        region: "{{ region }}"
        filters:
          instance-state-name: running
          "tag:Application": shaw
          "tag:Domain": "{{ domain }}"
          "tag:Project": "{{ project }}"
          "tag:Tenant": "{{ tenant }}"
      register: shaw_instances
      when:
        - groups['shaw'] is not defined
        - cloud == 'aws'

    - name: ENCRYPTION OVERLAY (KAFKA) | building shaw host group
      add_host: hostname="{{ item }}" groupname=shaw ansible_ssh_private_key_file="{{ key_path }}/{{ cloud }}-{{ region }}-{{ project }}-shaw-{{ domain }}-private-key.pem"
      with_items: "{{ shaw_instances.instances|map(attribute='private_ip_address')|list }}"
      when:
        - shaw_instances.instances is defined
        - shaw_instances.instances | length > 0

# this is necessary before we build host groups from the ansible server
- name: ENCRYPTION OVERLAY (KAFKA) | discovering kafka broker facts
  hosts: kafka_broker
  tasks:
    - setup:
      
- name: ENCRYPTION OVERLAY (KAFKA) | building kafka broker public internal host group
  hosts: localhost
  vars_files:
    - roles/encryption/defaults/main.yml
  gather_facts: no
  tasks:
    - name: ENCRYPTION OVERLAY | building kafka broker public internal host group
      add_host: hostname="{{ hostvars[item].ansible_eth1.ipv4.address }}" groupname=kafka_public
      with_items: "{{ groups['kafka_broker'] }}"
      when: "'kafka_broker' in groups | default([])"
      
- name: ENCRYPTION OVERLAY (KAFKA) | creating keystores and truststores
  hosts: shaw
  vars_files:
    - vars/encryption.yml
    - "{{ tenant_config_path }}/config/site.yml"
  gather_facts: yes
  tasks:
    - include_role:
        name: encryption
        tasks_from: generate-ca
    - include_role:
        name: encryption
        tasks_from: generate-client
            
- name: ENCRYPTION OVERLAY (KAFKA) | configuring {{ broker.application }} encryption
  hosts: kafka_broker
  vars_files:
    - "{{ tenant_config_path }}/config/site.yml"
  gather_facts: yes
  tasks:
    - include_role:
        name: encryption
        tasks_from: encrypt-brokers

# once the brokers are done we can reconfigure all telegraf clients
- name: ENCRYPTION OVERLAY (TELEGRAF) | configuring telegraf encryption
  hosts: shaw:zookeeper:kafka_broker:registry:controlcenter:kafka_connect:rest_proxy:kafka_ksql:kafka_replicator
  vars_files:
    - vars/encryption.yml
    - roles/encryption/defaults/main.yml
    - "{{ tenant_config_path }}/config/site.yml"
  vars:
    # this is semi clever; application gets set based on each host group
    application: "{{ group_names | first }}"
  gather_facts: no
  tasks:
    - include_role:
        name: encryption
        tasks_from: encrypt-telegraf
      when: using_telegraf | default (telegraf.enabled)

- name: ENCRYPTION OVERLAY (KAFKA) | configuring schema registry encryption
  hosts: registry
  vars_files:
    - "{{ tenant_config_path }}/config/site.yml"
  gather_facts: no
  tasks:
    - include_role:
        name: encryption
        tasks_from: encrypt-schemaregistry
        
- name: ENCRYPTION OVERLAY (KAFKA) | configuring kafka connector encryption
  hosts: kafka_connect
  vars_files:
    - "{{ tenant_config_path }}/config/site.yml"
  gather_facts: no
  tasks:
    - include_role:
        name: encryption
        tasks_from: encrypt-connector

- name: ENCRYPTION OVERLAY (KAFKA) | encrypting rest proxy
  hosts: rest_proxy
  vars_files:
    - "{{ tenant_config_path }}/config/site.yml"
  gather_facts: no
  tasks:
    - include_role:
        name: encryption
        tasks_from: encrypt-restproxy
        
- name: ENCRYPTION OVERLAY (KAFKA) | configuring control center encryption
  hosts: controlcenter
  vars_files:
    - "{{ tenant_config_path }}/config/site.yml"
  gather_facts: no
  tasks:
    - include_role:
        name: encryption
        tasks_from: encrypt-controlcenter

# this is necessary before we build host groups from the ansible server
- name: ENCRYPTION OVERLAY (KAFKA) | discovering kafka registry hosts
  hosts: registry
  tasks:
    - setup:
      
- name: ENCRYPTION OVERLAY (KAFKA) | building kafka registry public internal host group
  hosts: localhost
  vars_files:
    - roles/encryption/defaults/main.yml
  gather_facts: no
  tasks:
    - name: ENCRYPTION OVERLAY | building kafka broker public internal host group
      add_host: hostname="{{ hostvars[item].ansible_eth1.ipv4.address }}" groupname=registry_public
      with_items: "{{ groups['registry'] }}"
      when: "'registry' in groups | default([])"
      
- name: ENCRYPTION OVERLAY (KAFKA) | configuring ksql encryption
  hosts: kafka_ksql
  vars_files:
    - "{{ tenant_config_path }}/config/site.yml"
  gather_facts: no
  tasks:
    - include_role:
        name: encryption
        tasks_from: encrypt-ksql
        
# we run this because all broker interactions are now encrypted
- name: ENCRYPTION OVERLAY (KAFKA) | completing postflight actions
  hosts: zookeeper:kafka_broker:registry:controlcenter:kafka_connect:rest_proxy:kafka_ksql:kafka_replicator
  vars_files:
    - vars/postflight.yml
    - "{{ tenant_config_path }}/config/site.yml"
  vars:
      # this is semi clever; application gets set based on each host group
      application: "{{ group_names | first }}"
  gather_facts: no
  tasks:
    - include_role:
        name: postflight
    
    - include_role:
        name: encryption
        tasks_from: copy-stores
        
- name: ENCRYPTION OVERLAY (KAFKA) | distributing broker client credentials
  hosts: kafka_clients
  gather_facts: no
  tasks:
    - include_role:
        name: encryption
        tasks_from: copy-stores

- name: ENCRYPTION OVERLAY (KAFKA) | removing locally downloaded files
  hosts: localhost
  vars_files:
    - vars/encryption.yml
  tasks:
    - name: ENCRYPTION OVERLAY (KAFKA) | removing local stores
      file:
        path: "{{ key_path }}/{{ item }}"
        state: absent
      with_items:
        - kafka.server.keystore.jks
        - kafka.server.truststore.jks
        - client-cert
        - ca-cert
        - ca-key.unec
      when: cleanup
